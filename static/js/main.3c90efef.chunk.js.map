{"version":3,"sources":["components/counter/CounterHeader/CounterHeader.jsx","components/counter/CounterBody/CounterBody.jsx","components/counter/CounterFooter/CounterFooter.jsx","components/settings/Settings.jsx","redux/counterReducer.js","components/settings/SettingsContainer.jsx","components/counter/CounterContainer.jsx","components/counter/Counter.jsx","serviceWorker.js","redux/store.js","index.js","App.js"],"names":["CounterHeader","className","CounterBody","props","classForWrongValue","isValueWrong","currentValue","CounterFooter","changeValue","event","target","currentTarget","id","buttonsElements","value","map","item","action","classForSettingsIcon","classForDisabledButton","modeChangingInProcess","resetValue","openSettings","disabled","key","onClick","Settings","state","maxTempValue","minTempValue","isError","setMaxTempValue","newMaxTempValue","setState","setMinTempValue","newMinTempValue","setMaxMinValues","closeSettings","setTimeout","enableButtons","closeSettingsWindow","this","settings","maxValue","minValue","classForError","htmlFor","onChange","type","placeholder","flags","React","Component","initialState","counter","settingsMode","counterMode","SettingsContainer","connect","newMaxValue","newMinValue","CounterContainer","disableButtons","Boolean","window","location","hostname","match","reducers","combineReducers","newCounter","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3c90efef.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const CounterHeader = () => {\r\n    return (\r\n        <header className='counter-header'>\r\n            Counter\r\n        </header>\r\n    )\r\n}","import React from 'react';\r\n\r\nexport const CounterBody = (props) => {\r\n    let classForWrongValue = props.isValueWrong ? 'counter-error' : '';\r\n\r\n    return (\r\n        <main className={`counter-body ${classForWrongValue}`}>\r\n            {props.currentValue}\r\n        </main>\r\n    )\r\n}","import React from 'react';\r\n\r\nexport const CounterFooter = (props) => {\r\n    const buttons = [\r\n        {id: 'plus', value: 'Plus'},\r\n        {id: 'minus', value: 'Minus'},\r\n        {id: 'reset', value: 'Reset'},\r\n        {id: 'settings', value: 'Settings'}\r\n    ];\r\n\r\n    const changeValue = (event) => {\r\n        let target = event.currentTarget.id;\r\n        props.changeValue(target);\r\n    };\r\n\r\n    const buttonsElements = buttons.map(item => {\r\n        let action = () => {};\r\n        let classForSettingsIcon = '';\r\n        let classForDisabledButton = props.modeChangingInProcess ? 'disabled-button' : '';\r\n        \r\n        switch (item.id) {\r\n            case 'plus':\r\n            case 'minus': { action = changeValue; break; }\r\n            case 'reset': { action = props.resetValue; break; }\r\n            case 'settings': { action = props.openSettings; classForSettingsIcon='settings-icon'; break; }\r\n            default: break;\r\n        }\r\n        return (\r\n            <button disabled={props.modeChangingInProcess} key={item.id} id={item.id}\r\n                className={`${classForSettingsIcon} ${classForDisabledButton}`}\r\n                onClick={action}>{item.id !== 'settings' && item.value}</button>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <footer className='counter-footer'>\r\n            <div>\r\n                {buttonsElements[0]}\r\n                {buttonsElements[1]}\r\n            </div>\r\n            <div>\r\n                {buttonsElements[2]}\r\n            </div>\r\n            <div>\r\n                {buttonsElements[3]}\r\n            </div>\r\n        </footer>\r\n    )\r\n}","import React from 'react';\r\n\r\nexport class Settings extends React.Component {\r\n    state = {\r\n        maxTempValue: 0,\r\n        minTempValue: 0,\r\n        isError: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            maxTempValue: this.props.settings.maxValue,\r\n            minTempValue: this.props.settings.minValue\r\n        });\r\n\r\n        setTimeout(() => {\r\n            this.props.enableButtons();\r\n        }, 350);\r\n    }\r\n\r\n    setMaxTempValue = (event) => {\r\n        let newMaxTempValue = event.currentTarget.value;\r\n\r\n        if (newMaxTempValue > this.state.minTempValue && newMaxTempValue <= 15) {\r\n            this.setState({ maxTempValue: +newMaxTempValue, isError: false });\r\n        } else {\r\n            this.setState({ isError: true });\r\n        }\r\n    }\r\n\r\n    setMinTempValue = (event) => {\r\n        let newMinTempValue = event.currentTarget.value;\r\n\r\n        if (newMinTempValue < this.state.maxTempValue && newMinTempValue >= 0) {\r\n            this.setState({ minTempValue: +newMinTempValue, isError: false });\r\n        } else {\r\n            this.setState({ isError: true });\r\n        }\r\n    }\r\n\r\n    setMaxMinValues = () => {\r\n        this.props.closeSettings();\r\n        this.props.setMaxMinValues(this.state.maxTempValue, this.state.minTempValue);\r\n\r\n        this.setState({ isError: false });\r\n\r\n        setTimeout(() => {\r\n            this.props.enableButtons();\r\n        }, 350);\r\n    }\r\n\r\n    closeSettingsWindow = () => {\r\n        this.props.closeSettings();\r\n        \r\n        setTimeout(() => {\r\n            this.props.enableButtons();\r\n        }, 350);\r\n    }\r\n\r\n    render() {\r\n        let classForError = this.state.isError ? 'error' : '';\r\n\r\n        return (\r\n            <div className='settings'>\r\n                <div className='settings-body'>\r\n                    <div>\r\n                        <label htmlFor={1}>Maximum value: </label>\r\n                        <input id={1} onChange={this.setMaxTempValue} value={this.state.maxTempValue}\r\n                            className={classForError} type='number' placeholder='max value' />\r\n                    </div>\r\n                    <div>\r\n                        <label htmlFor={2}>Minimum value: </label>\r\n                        <input id={2} onChange={this.setMinTempValue} value={this.state.minTempValue}\r\n                            className={classForError} type='number' placeholder='min value' />\r\n                    </div>\r\n                </div>\r\n                <div className='settings-footer'>\r\n                    <button disabled={this.props.flags.modeChangingInProcess} onClick={this.setMaxMinValues}>Set</button>\r\n                    <button disabled={this.props.flags.modeChangingInProcess} onClick={this.closeSettingsWindow}>Close</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","const CHANGE_VALUE = 'CHANGE_VALUE';\r\nconst RESET_VALUE = 'RESET_VALUE';\r\nconst OPEN_SETTINGS = 'OPEN_SETTINGS';\r\nconst CLOSE_SETTINGS = 'CLOSE_SETTINGS';\r\nconst DISABLE_BUTTONS = 'DISABLE_BUTTONS';\r\nconst ENABLE_BUTTONS = 'ENABLE_BUTTONS';\r\nconst SET_MAX_MIN_VALUES = 'SET_MAX_MIN_VALUES';\r\n\r\nlet initialState = {\r\n    counter: {\r\n        currentValue: 0,\r\n        isValueWrong: false\r\n    },\r\n    settings: {\r\n        maxValue: 5,\r\n        minValue: 0\r\n    },\r\n    flags: {\r\n        settingsMode: false,\r\n        counterMode: true,\r\n        modeChangingInProcess: false\r\n    }\r\n}\r\n\r\nexport let counterReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case CHANGE_VALUE: {\r\n            let newCounter;\r\n            if ((action.target === 'plus' && state.counter.currentValue >= state.settings.maxValue)\r\n                || (action.target === 'minus' && state.counter.currentValue <= state.settings.minValue)) {\r\n                    return {\r\n                        ...state,\r\n                        counter: {\r\n                            ...state.counter,\r\n                            isValueWrong: true\r\n                        }\r\n                    };\r\n            } else {\r\n                newCounter = action.target === 'plus' ? state.counter.currentValue + 1 : state.counter.currentValue - 1;\r\n                return {\r\n                    ...state,\r\n                    counter: {\r\n                        ...state.counter,\r\n                        currentValue: newCounter,\r\n                        isValueWrong: false\r\n                    }\r\n                };\r\n            };\r\n        }\r\n        case RESET_VALUE: {\r\n            return {\r\n                ...state,\r\n                counter: {\r\n                    ...state.counter,\r\n                    currentValue: state.settings.minValue,\r\n                    isValueWrong: false\r\n                }\r\n            };\r\n        }\r\n        case OPEN_SETTINGS: {\r\n            return {\r\n                ...state,\r\n                flags: {\r\n                    ...state.flags,\r\n                    settingsMode: true,\r\n                    counterMode: false,\r\n                    modeChangingInProcess: true\r\n                }\r\n            };\r\n        }\r\n        case CLOSE_SETTINGS: {\r\n            return {\r\n                ...state,\r\n                flags: {\r\n                    ...state.flags,\r\n                    settingsMode: false,\r\n                    counterMode: true,\r\n                    modeChangingInProcess: true\r\n                }\r\n            };\r\n        }\r\n        case ENABLE_BUTTONS: {\r\n            return {\r\n                ...state,\r\n                flags: {\r\n                    ...state.flags,\r\n                    modeChangingInProcess: false\r\n                }\r\n            };\r\n        }\r\n        case SET_MAX_MIN_VALUES: {\r\n            return {\r\n                ...state,\r\n                settings: {\r\n                    ...state.settings,\r\n                    maxValue: action.newMaxValue,\r\n                    minValue: action.newMinValue\r\n                },\r\n                counter: {\r\n                    ...state.counter,\r\n                    currentValue: action.newMinValue\r\n                }\r\n            };\r\n        }\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport const changeValue = (target) => ({ type: CHANGE_VALUE, target });\r\nexport const resetValue = () => ({ type: RESET_VALUE });\r\nexport const openSettings = () => ({ type: OPEN_SETTINGS });\r\nexport const closeSettings = () => ({ type: CLOSE_SETTINGS });\r\nexport const disableButtons = () => ({ type: DISABLE_BUTTONS });\r\nexport const enableButtons = () => ({ type: ENABLE_BUTTONS });\r\nexport const setMaxMinValues = (newMaxValue, newMinValue) => ({ type: SET_MAX_MIN_VALUES, newMaxValue, newMinValue });","import { connect } from 'react-redux';\r\nimport { Settings } from './Settings';\r\nimport { closeSettings, enableButtons, setMaxMinValues } from './../../redux/counterReducer';\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        settings: state.counter.settings,\r\n        flags: state.counter.flags\r\n    }\r\n}\r\n\r\nexport const SettingsContainer = connect(mapStateToProps, {\r\n    closeSettings, enableButtons, setMaxMinValues\r\n}) (Settings);","import { connect } from 'react-redux';\r\nimport { Counter } from './Counter';\r\nimport { changeValue, resetValue, openSettings, closeSettings, disableButtons } from './../../redux/counterReducer';\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        counter: state.counter.counter,\r\n        flags: state.counter.flags\r\n    }\r\n}\r\n\r\nexport const CounterContainer = connect(mapStateToProps, {\r\n    changeValue,\r\n    resetValue,\r\n    openSettings,\r\n    closeSettings,\r\n    disableButtons\r\n}) (Counter);","import React from 'react';\r\nimport { CounterHeader } from './CounterHeader/CounterHeader';\r\nimport { CounterBody } from './CounterBody/CounterBody';\r\nimport { CounterFooter } from './CounterFooter/CounterFooter';\r\nimport { SettingsContainer } from '../settings/SettingsContainer';\r\n\r\nexport const Counter = (props) => {\r\n    return (\r\n        <div>\r\n            <CounterHeader />\r\n            <CounterBody\r\n                currentValue={props.counter.currentValue}\r\n                isValueWrong={props.counter.isValueWrong} />\r\n            { props.flags.counterMode && <CounterFooter\r\n                modeChangingInProcess={props.flags.modeChangingInProcess}\r\n                changeValue={props.changeValue}\r\n                resetValue={props.resetValue}\r\n                openSettings={props.openSettings}\r\n                closeSettings={props.closeSettings}\r\n                disableButtons={props.disableButtons}\r\n                enableButtons={props.disableButtons}\r\n            /> }\r\n            { props.flags.settingsMode && <SettingsContainer /> }\r\n        </div>\r\n    )\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers, createStore } from \"redux\";\r\nimport { counterReducer } from './counterReducer';\r\n\r\nlet reducers = combineReducers({\r\n    counter: counterReducer\r\n})\r\n\r\nexport let store = createStore(reducers);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport './App.css';\nimport { CounterContainer } from './components/counter/CounterContainer';\n\nexport const App = () => {\n    return (\n        <div className='app'>\n            <CounterContainer />\n        </div>\n    )\n}"],"sourceRoot":""}